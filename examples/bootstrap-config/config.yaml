admin:
  address:
    socket_address: 
      address: 127.0.0.1
      port_value: 9901 

static_resources:
  listeners:
  - name: "whereami-backend"
    api_listener: 
      api_listener:
        "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
        codec_type: AUTO
        route_config:
          name: local_route
          virtual_hosts:
          - name: local_service
            domains: ["*"]
            routes:
            - match: { prefix: "" }
              route: { cluster: whereami-backend }
        http_filters:
        - name: envoy.filters.http.router
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
    # filter_chains:
    # - filters:
    #   - name: envoy.filters.network.http_connection_manager
    #     typed_config:
    #       "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
    #       stat_prefix: ingress_http
    #       codec_type: AUTO
    #       route_config:
    #         name: local_route
    #         virtual_hosts:
    #         - name: local_service
    #           domains: ["*"]
    #           routes:
    #           - match: { prefix: "/" }
    #             route: { cluster: some_service }
    #       http_filters:
    #       - name: envoy.filters.http.router
    #         typed_config:
    #           "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
  # - name: listener_0
  #   address:
  #     socket_address: { address: 127.0.0.1, port_value: 10000 }
  #   filter_chains:
  #   - filters:
  #     - name: envoy.filters.network.http_connection_manager
  #       typed_config:
  #         "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
  #         stat_prefix: ingress_http
  #         codec_type: AUTO
  #         route_config:
  #           name: local_route
  #           virtual_hosts:
  #           - name: local_service
  #             domains: ["*"]
  #             routes:
  #             - match: { prefix: "/" }
  #               route: { cluster: some_service }
  #         http_filters:
  #         - name: envoy.filters.http.router
  #           typed_config:
  #             "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
  # NOTE: for a consistent snapshot, all clusters must be referenced by a listener.
  # All clusters must have 'load_assignment', and 'load_balancing_weight' must be set.
  # Cluster type = "EDS", lb_policy: ROUND_ROBIN.
  # caveat: addresses here must be IP addresses.  no hostnames allowed :(
  #   - xds can maybe do resolution before creating resources in the future.
  clusters:
  # - name: some_service
  #   connect_timeout: 0.25s
  #   type: LOGICAL_DNS
  #   lb_policy: ROUND_ROBIN
  #   load_assignment:
  #     cluster_name: some_service
  #     endpoints:
  #     - lb_endpoints:
  #       - endpoint:
  #           address:
  #             socket_address:
  #               address: envoyproxy.io
  #               port_value: 80
  #       locality:
  #         zone: local
  - name: whereami-backend
    type: EDS
    lb_policy: ROUND_ROBIN
    eds_cluster_config:
      eds_config:
        ads:
    # TODO: extract these for use in EDS? or separate config.
    load_assignment:
      cluster_name: whereami-backend
      endpoints:
      - locality:
          region: local
          zone: local
        lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: "127.0.0.1"
                port_value: 9091
        # Required for consideration by grpc
        load_balancing_weight: 1
      policy:
